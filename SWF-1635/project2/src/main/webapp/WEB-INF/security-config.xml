<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
       xmlns:beans="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.2.xsd">
           
    <!-- Static resources such as CSS and JS files are ignored by Spring Security -->
    <http pattern="/static/**" security="none" />
    
	<http access-denied-page="/spring/denied">
	   <intercept-url pattern="/spring/main" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
	   <intercept-url pattern="/spring/login" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
	   <intercept-url pattern="/spring/signup" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
	   <intercept-url pattern="/spring/error" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
	   <intercept-url pattern="/spring/denied" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
	   
	   <intercept-url pattern="/spring/**" access="ROLE_USER,ROLE_MEMBER"/>
	   
	   <form-login login-page="/spring/login" default-target-url="/spring/main" always-use-default-target="true"
	       authentication-failure-url="/spring/error" />
	   
	   <logout invalidate-session="true" delete-cookies="JSESSIONID" logout-success-url="/spring/home"/>
	   
	   <session-management invalid-session-url="/spring/main" session-authentication-error-url="/spring/sessionError"
	       session-fixation-protection="changeSessionId">
	       <concurrency-control max-sessions="1" error-if-maximum-exceeded="true" 
	                            expired-url="/spring/login"/>
	   </session-management>
	</http>
	
	<!-- @Secured and JSR250-->
    <global-method-security secured-annotations="enabled"  pre-post-annotations="enabled"/> 
    
	<beans:bean name="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
	
	<!-- reference to AuthenticationManager instance -->
	<authentication-manager alias="authenticationManager" erase-credentials="true">
	    
	    <!-- reference to DaoAuthenticationProvider which implements a custom UserDetailsService -->
	    <authentication-provider user-service-ref="customUserDetailsService">
	        
	        <password-encoder ref="bcryptEncoder" hash="bcrypt"/>
	    </authentication-provider>
	</authentication-manager>

	<!-- 
		Configure Spring Security 
	-->
<!-- 	<security:http auto-config="true" use-expressions="true">
		<security:form-login login-page="/app/login" login-processing-url="/app/j_spring_security_check" 
			default-target-url="/app/home" authentication-failure-url="/app/login?login_error=1" />
		<security:logout logout-url="/app/logout" logout-success-url="/app/home" />
		<security:intercept-url pattern="/secured/appleUser" method="POST" access="hasRole('ROLE_APPLE_USER')" />
		<security:intercept-url pattern="/secured/androidUser" method="POST" access="hasRole('ROLE_ANDROID_USER')" />
	</security:http> -->

	<!--
		Define local authentication provider, a real app would use an external provider (JDBC, LDAP, CAS, etc)
		
		usernames/passwords are:
			joe/joe1
			pete/pete1
	-->
<!-- 	<security:authentication-manager>
		<security:authentication-provider>
			<security:password-encoder hash="md5" />
			<security:user-service>
				<security:user name="joe" password="bf403351dfb2ae819874163aff25a49c" 
					authorities="ROLE_USER, ROLE_APPLE_USER" />
				<security:user name="pete" password="5d2ea1f70185e4357183bb9c00187219" 
					authorities="ROLE_USER, ROLE_ANDROID_USER" />
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>	 -->
	

</beans:beans>